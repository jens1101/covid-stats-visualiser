{"version":3,"sources":["common/constants.js","common/helper.js","ui/CountryCovidStats.js","common/providers.js","ui/WorldCovidStats.js","ui/App.js","reportWebVitals.js","index.js"],"names":["STATUS","API_BASE","groupStatsByMonth","stats","reduce","groupedCases","currentStat","monthKey","format","startOfMonth","parseISO","Date","set","get","Cases","Map","CountryCovidStats","predictionDuration","months","historicalStats","Array","from","map","month","cases","predictionStats","length","sma","SMA","slice","forEach","stat","update","start","add","days","end","eachDayOfInterval","getResult","Math","floor","toNumber","formatISO","getStatsPrediction","className","colSpan","country","status","a","apiUrl","URL","fetch","toString","method","redirect","response","json","WorldCovidStats","App","useState","countryStats","setCountryStats","worldStats","setWorldStats","useEffect","getCountryCovidStats","then","getWorldCovidStats","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e719fa58.chunk.js","sourcesContent":["export const STATUS = {\n  CONFIRMED: \"confirmed\",\n  RECOVERED: \"recovered\",\n  DEATHS: \"deaths\",\n};\n\nexport const WINDOW_SIZE = 10;\n\nexport const API_BASE = \"https://api.covid19api.com\";\n","import {\n  format,\n  parseISO,\n  startOfMonth,\n  formatISO,\n  add,\n  eachDayOfInterval,\n} from \"date-fns\";\nimport { SMA } from \"trading-signals\";\nimport { WINDOW_SIZE } from \"common/constants.js\";\n\nexport function groupStatsByMonth(stats) {\n  return stats.reduce((groupedCases, currentStat) => {\n    const monthKey = format(\n      startOfMonth(parseISO(currentStat.Date)),\n      \"MMMM yyyy\"\n    );\n\n    groupedCases.set(\n      monthKey,\n      (groupedCases.get(monthKey) || 0) + currentStat.Cases\n    );\n\n    return groupedCases;\n  }, new Map());\n}\n\nexport function getStatsPrediction(stats, predictionDuration) {\n  if (stats.length < WINDOW_SIZE) {\n    return [];\n  }\n\n  const sma = new SMA(WINDOW_SIZE);\n  stats.slice(-WINDOW_SIZE).forEach((stat) => sma.update(stat.Cases));\n\n  const start = add(parseISO(stats[stats.length - 1].Date), { days: 1 });\n  const end = add(start, predictionDuration);\n\n  const predictionDates = eachDayOfInterval({ start, end });\n\n  return predictionDates.map((Date) => {\n    const cases = sma.getResult();\n    sma.update(cases);\n\n    return {\n      Cases: Math.floor(cases.toNumber()),\n      Date: formatISO(Date),\n    };\n  });\n}\n","import { getStatsPrediction, groupStatsByMonth } from \"common/helper\";\n\n/**\n *\n * @param {Object} params\n * @param params.stats\n * @param params.predictionDuration\n * @param params.groupBy\n * @return {JSX.Element}\n * @constructor\n */\nexport function CountryCovidStats({\n  stats = [],\n  predictionDuration = {\n    months: 12,\n  },\n}) {\n  const historicalStats = Array.from(groupStatsByMonth(stats)).map(\n    ([month, cases]) => (\n      <tr key={month}>\n        <td>{month}</td>\n        <td>{cases}</td>\n      </tr>\n    )\n  );\n\n  const predictionStats = Array.from(\n    groupStatsByMonth(getStatsPrediction(stats, predictionDuration))\n  ).map(([month, cases]) => (\n    <tr key={month}>\n      <td>{month}</td>\n      <td>{cases}</td>\n    </tr>\n  ));\n\n  return (\n    <table className={\"table\"}>\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Number of Confirmed Cases</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <tr>\n          <th colSpan={2}>Historic Stats</th>\n        </tr>\n        {historicalStats}\n      </tbody>\n\n      <tbody>\n        <tr>\n          <th colSpan={2}>Predicted Stats</th>\n        </tr>\n        {predictionStats}\n      </tbody>\n    </table>\n  );\n}\n","import { API_BASE } from \"common/constants.js\";\n\nexport async function getCountryCovidStats(country, status) {\n  const apiUrl = new URL(\n    `/dayone/country/${country}/status/${status}`,\n    API_BASE\n  );\n\n  const response = await fetch(apiUrl.toString(), {\n    method: \"GET\",\n    redirect: \"follow\",\n  });\n\n  return response.json();\n}\n\nexport async function getWorldCovidStats() {\n  const apiUrl = new URL(\"/world/total\", API_BASE);\n\n  const response = await fetch(apiUrl.toString(), {\n    method: \"GET\",\n    redirect: \"follow\",\n  });\n\n  return response.json();\n}\n","export function WorldCovidStats({ stats = [] }) {\n  return (\n    <table className={\"table\"}>\n      <thead>\n        <tr>\n          <th>Total Confirmed</th>\n          <th>Total Deaths</th>\n          <th>Total Recovered</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{stats[\"TotalConfirmed\"]}</td>\n          <td>{stats[\"TotalDeaths\"]}</td>\n          <td>{stats[\"TotalRecovered\"]}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { STATUS } from \"common/constants\";\nimport { CountryCovidStats } from \"ui/CountryCovidStats\";\nimport { getCountryCovidStats, getWorldCovidStats } from \"common/providers\";\nimport { WorldCovidStats } from \"ui/WorldCovidStats\";\n\nexport function App() {\n  const country = \"south-africa\";\n  const status = STATUS.CONFIRMED;\n\n  const [countryStats, setCountryStats] = useState([]);\n  const [worldStats, setWorldStats] = useState([]);\n\n  useEffect(() => {\n    getCountryCovidStats(country, status).then(setCountryStats);\n  }, [country, status]);\n\n  useEffect(() => {\n    getWorldCovidStats().then(setWorldStats);\n  }, []);\n\n  return (\n    <div className={\"container\"}>\n      <h1>COVID-19 Stats</h1>\n\n      <h2>World Stats</h2>\n      <WorldCovidStats stats={worldStats} />\n\n      <h2>South African Stats</h2>\n      <CountryCovidStats stats={countryStats} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"ui/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}